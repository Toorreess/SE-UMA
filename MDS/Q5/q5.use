model Q5

class Clock
attributes
  NOW : Integer
  started : Boolean init:false
operations
  pasoTiempo()
  begin
    self.NOW := self.NOW + 1;
    for p in self.community.person do
    if(not p.isDead and p.community.esperanzaVida > p.age + 1) then
      p.cumple()
    else
      if(not p.isDead) then
        p.muerte()
      end;
    end
    end;
  end
  pre: true
  post: (self.NOW = self.NOW@pre + 1) and (self.community.person -> forAll(x | not x.isDead implies x.age = x.age@pre+1))
  
end

class Community
 attributes 
  aJoven:Integer
  aAdulto:Integer
  aAnciano:Integer
  esperanzaVida:Integer
end

abstract class Person
  attributes
    birthYear:Integer
    deathYear:Integer
    age:Integer init = 0
    isDead:Boolean derive=
    self.deathYear <> null
 
  operations
    inicializa()
    begin
    end

    nace()
    begin
      self.birthYear := self.community.clock.NOW;
    end

    cumple()
    begin
      self.age := self.age + 1;
    end
    pre: self.isDead = false and (self.age+1 < self.community.esperanzaVida)
    post: self.age = self.age@pre+1

    muerte()
    begin
      self.deathYear := self.community.clock.NOW;
      if(self.isMarried()) then
        if(self.husband -> select(m | m.activo())->notEmpty()) then
          self.husband ->select(m | m.activo())->asOrderedSet()->
          first().husband.viudad(self.husband->select(m | m.activo())->asOrderedSet->first())
        else 
          self.wife ->select(m | m.activo())->asOrderedSet()->
          first().wife.viudad(self.wife->select(m | m.activo())->asOrderedSet->first())
        end
      end
    end
    pre: self.isDead = false
    post: self.isDead = true and self.deathYear = self.community.clock.NOW

  viudad(m: Marriage)
  begin
    m.endYear := m.husband.community.clock.NOW
  end
  pre: m.activo() = true
  pre: m.endYear = null
  post: m.endYear = m.husband.community.clock.NOW
  post: m.husband.isDead = true
  post: m.activo() = false

  isMarried(): Boolean = 
   self.husband->select(x | x.endYear = null)->size() + self.wife->select(x | x.endYear = null)->size()=1

  marriages(): Integer =
   self.husband->size() + self.wife->size()
  
  peticionMatrimonio()
  begin
    self.respuestaMatrimonio(self.pretendiente)
  end
  -- Consideramos que para que pida matrimonio a alguien tiene que tener una solo pretendiente que es su pareja
  pre tieneUnaPareja: self.pretendido->size() = 1
  -- El que pide matrimonio tiene que tener la edad minima para poder casarse
  pre edadLegal: self.age >= self.community.aJoven
  -- Uno no puede casarse consigo mismo
  pre autoCasarse: self.pretendido <> self
  
  respuestaMatrimonio(p: Person)
  begin
    if (p.oclIsTypeOf(PersonaAceptadora)) then 
      self.aceptaMatrimonio(p);
    else if (p.oclIsTypeOf(PersonaRechazadora)) then
      self.rechazaMatrimonio(p);  
    else
      if (1.rand() < 0.5) then
        self.aceptaMatrimonio(p);
      else 
        self.rechazaMatrimonio(p); 
      end
    end
    end
  end

  aceptaMatrimonio(p: Person)
  begin
    declare m: Marriage;
    m:= new Marriage;
    m.startYear := self.community.clock.NOW;
    insert(self, m) into Marido;
    insert(p, m) into Mujer;
    delete(self,p) from intencionMatrimonio;
  end

  rechazaMatrimonio(p: Person)
  begin
    delete(self,p) from intencionMatrimonio
  end
  --post: self.intencionMatrimonio->asSet()->size()=0

  peticionDivorcio()
  begin
      if (self.husband->notEmpty) then
        self.respuestaDivorcio(self.husband.wife->asOrderedSet->first())
      else 
        self.respuestaDivorcio(self.wife.husband->asOrderedSet->first())
      end
  end

  respuestaDivorcio(p: Person)
  begin
    --En caso de que no quiera divorcarse podria preguntar tras un tiempo por si cambia de opinión
    if (p.oclIsTypeOf(PersonaAceptadora)) then 
      self.aceptaMatrimonio(p);
    else
      if (1.rand() < 0.5) then
        self.aceptaMatrimonio(p);
      end
    end
  end

  aceptaDivorcio(p: Person)
  begin
    if (self.husband->notEmpty) then
      self.husband->select(h | h.activo())->asOrderedSet()->first().terminarMatrimonio();
    else
       self.wife->select(w | w.activo())->asOrderedSet()->first().terminarMatrimonio();
    end;
    delete(self, p) from intencionDivorcio;
  end
  statemachines
  psm transicionEdad
    states
      ms:initial
	  Nacer
      Ninyo[self.age < self.community.aJoven and self.isDead = false]
      Joven[self.age < self.community.aAdulto and self.age >= self.community.aJoven and self.isDead = false]
      Adulto[self.age < self.community.aAnciano and self.age >= self.community.aAdulto and self.isDead = false]
      Mayor[self.age >= self.community.aAnciano and self.isDead = false]
      Fallecido:final [self.isDead]
    transitions
      ms->Nacer
	  Nacer->Ninyo {[self.age < self.community.aJoven]cumple()}
      Ninyo->Ninyo{[self.age + 1 < self.community.aJoven]cumple()}
      Ninyo->Joven{[self.age +1  >= self.community.aJoven]cumple()}
      Ninyo->Fallecido{[self.isDead]muerte()}
      Joven->Joven{[self.age + 1 < self.community.aAdulto]cumple()}
      Joven->Adulto{[self.age + 1 >= self.community.aAdulto]cumple()}
      Joven->Fallecido{[self.isDead]muerte()}
      Adulto->Adulto{[self.age + 1 < self.community.aAnciano]cumple()}
      Adulto->Mayor{[self.age + 1 >= self.community.aAnciano]cumple()}
      Adulto->Fallecido{[self.isDead]muerte()}
      Mayor->Mayor{[self.age + 1 < self.community.esperanzaVida]cumple()}
      Mayor->Fallecido{[self.isDead]muerte()}
  end

  psm transicionEstadoCivil
    states
      ms:initial
      Inicio
      Soltero[self.marriages() = 0]
      Casado[self.isMarried()]
      Divorciado[self.marriages() > 0 and self.isMarried() = false]
      Viudo[not self.isMarried() and self.marriages() > 0 and (self.husband ->
        select(h | h.husband.isDead and h.endYear = h.husband.deathYear) -> size() +
        self.wife -> select(w | w.wife.isDead and w.endYear= w.wife.deathYear) -> size() > 0)]
      Fallecido :final[self.isDead]
    transitions
      ms->Inicio
	  Inicio->Soltero{[self.isMarried()=false]cumple()}
      Soltero->Soltero{[self.isMarried() = false]cumple()}
      Soltero->Casado{[self.oclInState(Casado)] aceptaMatrimonio()}
      Soltero->Fallecido{[self.isDead]muerte()}
      Casado->Casado{[self.isMarried()] cumple()}
      Casado->Divorciado{[self.oclInState(Casado)] aceptaDivorcio()}
      Casado->Viudo{[self.isMarried()] viudad()}
      Casado->Fallecido{[self.isDead]muerte()}
      Divorciado->Divorciado{[self.isMarried() = false]cumple()}
      Divorciado->Casado{[self.oclInState(Casado)]aceptaMatrimonio()}
      Divorciado->Fallecido{[self.isDead]muerte()}
      Viudo->Viudo{[self.isMarried()=false]cumple()}
      Viudo->Casado{[self.oclInState(Casado)]aceptaMatrimonio()}
      Viudo->Fallecido{[self.isDead]muerte()}
  end
end

class PersonaAceptadora < Person
attributes
end

class PersonaRechazadora < Person
attributes
end

class PersonaAleatoria < Person
attributes
end



class Marriage
 attributes
  startYear:Integer
  endYear:Integer

 operations
  activo(): Boolean = self.endYear = null

  terminarMatrimonio()
  begin
    self.endYear:= self.husband.community.clock.NOW
  end
  pre matrimonioActivo: (self.endYear = null) and (self.startYear <> null)
  post: self.endYear = self.husband.community.clock.NOW
end

aggregation Tiempo between
 Community [0..*] role community
 Clock [1] role clock
end

composition Pertenencia between
 Community [1] role community
 Person [0..*] role person
end

association Marido between
 Person [1] role wife
 Marriage [0..*] role husband
end

association Mujer between
 Person [1] role husband
 Marriage [0..*] role wife
end

association intencionMatrimonio between
  Person [0..1] role pretendiente
  Person [0..1] role pretendido
end

association intencionDivorcio between
  Person [0..1] role divorciador  
  Person [0..1] role ex
end

constraints

--Aléticas
 context Person inv MuertoVivo:
 self.birthYear<=self.deathYear

 context Marriage inv StartEndMarriage:
 self.startYear<=self.endYear

 context Person inv MuertosNoSePuedenCasar:
 self.isDead=true implies self.husband->forAll(x | x.endYear <=self.deathYear) and self.wife->forAll(y | y.endYear<=self.deathYear)=false 

 context Clock inv NacimientoFuturo:
 Person.allInstances()->forAll(p | p.birthYear <= self.NOW)=true

 context Clock inv MatrimonioFuturo:
 Marriage.allInstances()->forAll(m | m.startYear <= self.NOW)=true

 context Marriage inv DivorcioSinCasar:
 self.startYear = null implies self.endYear = null

--Deónticas
 context Clock inv UnReloj:
 Clock.allInstances()->size()=1

 context Person inv AutoCasado:
 self.husband->forAll(h | h.husband<>self) and self.wife->forAll(w | w.wife<> self) = true

 context Person inv Monogamia:
 self.husband-> select(h | h.endYear = null)->size() + self.wife->select(w|w.endYear = null)->size() <=1

 context Person inv NinoCasado:
 self.age<self.community.aJoven implies self.husband->size() + self.wife->size()<=0

 context Person inv EutanasiaOSuicidio:
 self.isDead = true implies self.age >= self.community.esperanzaVida

 context Person inv EdadValida:
 self.age <> null

